%!PS-Adobe-3.0 EPSF-3.0
%%%%Creator: PStill/xpdf 3.02.07
%%Title: tmp-26188
%%LanguageLevel: 2
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 95 65
%%EndComments
%%BeginProlog
%%%%BeginResource: procset xpdf 3.02.07.1 0
/xpdf 100 dict def xpdf begin
/pst_setopacity where { pop } { /pst_setopacity { pop } def } ifelse
/pst_setdncolorant where { pop } { /pst_setdncolorant { pop pop } def } ifelse
/pst_setdnsample where { pop } { /pst_setdnsample { pop } def } ifelse
/setoverprint where { pop } { /setoverprint { pop } def } ifelse
% PDF special state
/pdfDictSize 17 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
    /pdfSpecialSetup where { pop /pdfSpecialSetup load exec } if
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  /pdfSavePage save def
  pdfDictSize dict begin
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfstrokeCA 1.0 def
  /pdfotherCA 1.0 def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end pdfSavePage restore } def
% separation convention operators
/findcmykcustomcolor where {
  pop
}{
  /findcmykcustomcolor { 5 array astore } def
} ifelse
/setcustomcolor where {
  pop
}{
  /setcustomcolor {
    exch
    [ exch /Separation exch dup 4 get exch /DeviceCMYK exch
      0 4 getinterval cvx
      [ exch /dup load exch { mul exch dup } /forall load
        /pop load dup ] cvx
    ] setcolorspace setcolor
  } def
} ifelse
/customcolorimage where {
  pop
}{
  /customcolorimage {
    gsave
    [ exch /Separation exch dup 4 get exch /DeviceCMYK exch
      0 4 getinterval
      [ exch /dup load exch { mul exch dup } /forall load
        /pop load dup ] cvx
    ] setcolorspace
    10 dict begin
      /ImageType 1 def
      /DataSource exch def
      /ImageMatrix exch def
      /BitsPerComponent exch def
      /Height exch def
      /Width exch def
      /Decode [1 0] def
    currentdict end
    image
    grestore
  } def
} ifelse
% PDF color state
/k { 4 copy 4 array astore /pdfFill exch def setcmykcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/K { 4 copy 4 array astore /pdfStroke exch def setcmykcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/ck { 6 copy 6 array astore /pdfFill exch def
      findcmykcustomcolor exch setcustomcolor
      /pdfLastFill true def /pdfLastStroke false def } def
/CK { 6 copy 6 array astore /pdfStroke exch def
      findcmykcustomcolor exch setcustomcolor
      /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/sCA { /pdfstrokeCA exch def pdfLastStroke { pdfstrokeCA pst_setopacity } if } def
/oCA { /pdfotherCA exch def pdfLastFill { pdfotherCA pst_setopacity } if } def
/fCol {
  pdfLastFill not {
    pdfFill aload length 4 eq {
      setcmykcolor
    }{
      findcmykcustomcolor exch setcustomcolor
    } ifelse
    pdfFillOP setoverprint
    pdfotherCA pst_setopacity
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStroke aload length 4 eq {
      setcmykcolor
    }{
      findcmykcustomcolor exch setcustomcolor
    } ifelse
    pdfStrokeOP setoverprint
    pdfstrokeCA pst_setopacity
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfIm1Sep {
  /pdfImBuf1 4 index string def
  /pdfImBuf2 4 index string def
  /pdfImBuf3 4 index string def
  /pdfImBuf4 4 index string def
  { currentfile pdfImBuf1 readhexstring pop }
  { currentfile pdfImBuf2 readhexstring pop }
  { currentfile pdfImBuf3 readhexstring pop }
  { currentfile pdfImBuf4 readhexstring pop }
  true 4 colorimage
} def
/pstHasFastInvert systemdict /pst_fastinvert known def
/pdfImSep {
  findcmykcustomcolor exch
  dup /Width get /pdfImBuf1 exch string def
  dup /Decode get aload pop 1 index sub /pdfImDecodeRange exch def
  /pdfImDecodeLow exch def
  begin Width Height BitsPerComponent ImageMatrix DataSource end
  /pdfImData exch def
  pstHasFastInvert {
    { pdfImData pdfImBuf1 readstring pop
      pdfImDecodeLow 0 eq pdfImDecodeRange 255 eq and { pst_fastinvert }{
       0 1 2 index length 1 sub {
        1 index exch 2 copy get
        pdfImDecodeRange mul 255 div pdfImDecodeLow add round cvi
        255 exch sub put
      } for } ifelse
    }
  }{
    { pdfImData pdfImBuf1 readstring pop
      0 1 2 index length 1 sub {
        1 index exch 2 copy get
        pdfImDecodeRange mul 255 div pdfImDecodeLow add round cvi
        255 exch sub put
      } for }
  } ifelse
  6 5 roll customcolorimage
  skipEOD
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol aload pop k
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol aload pop k
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol aload pop k
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
0 0 0 1 k
0 0 0 1 K
false op
false OP
{} settransfer
0 0 95 65 re
W
q
q
Q
q
56.3417 53.4833 m
32.3479 54.0089 l
31.6911 24.0161 l
55.6849 23.4906 l
56.3417 53.4833 l
h
W
0.032 0.021 0 0.623 k
0.032 0.021 0 0.623 K
42.8656 49.3414 m
48.5778 49.2164 l
48.6432 52.2044 l
42.9311 52.3294 l
42.8656 49.3414 l
h
f
54.7485 53.2802 m
54.707 53.363 54.6616 53.4414 54.6185 53.5211 c
55.1563 50.0508 54.4165 45.9911 52.6402 42.3089 c
51.6094 40.1714 50.2325 38.1617 48.5486 36.4677 c
48.4647 36.3831 48.3779 36.3094 48.2933 36.2276 c
48.5446 47.7026 l
42.8325 47.8279 l
42.5002 32.6557 l
41.8468 32.4635 41.2002 32.338 40.5685 32.2852 c
40.2438 32.2586 39.921 32.2427 39.6051 32.2529 c
36.9256 32.337 34.5888 33.7542 33.2009 36.5081 c
32.6337 37.6352 32.2703 38.9018 32.0914 40.25 c
31.8219 37.2151 32.2427 34.2831 33.4526 31.8813 c
34.8298 29.149 36.9982 27.5526 39.4924 27.1076 c
39.807 27.0521 40.1281 27.0208 40.4528 27.0016 c
41.0798 26.9638 41.7258 26.9982 42.3785 27.0977 c
43.3146 27.2401 44.2705 27.5214 45.2254 27.9521 c
45.5505 28.0992 45.8742 28.2698 46.1989 28.451 c
46.3534 28.5378 46.5086 28.6216 46.6622 28.7148 c
47.1631 29.0185 47.6605 29.3648 48.1514 29.7477 c
48.717 30.1878 49.2766 30.6776 49.8222 31.225 c
50.8149 32.2242 51.694 33.3422 52.4698 34.5302 c
56.2851 40.3763 57.3748 48.0693 54.7485 53.2802 c
h
f
0 0 0 0.6 k
0 0 0 0.6 K
46.1931 26.9068 m
45.8684 26.7258 45.5445 26.5544 45.2194 26.4081 c
44.2647 25.9771 43.3087 25.6961 42.3726 25.5536 c
42.3338 23.7831 l
48.0458 23.6578 l
48.1454 28.2036 l
47.6547 27.8208 47.157 27.474 46.6564 27.1706 c
46.5027 27.0781 46.3474 26.9932 46.1931 26.9068 c
h
f
Q
q
0.028 0.019 0 0.576 k
0.028 0.019 0 0.576 K
15.8083 32.65 m
15.8083 28.675 l
17.3917 30.075 l
17.3917 32.8 l
18.4083 33.0333 19.3333 33.4417 20.15 34.025 c
19.25 35.275 l
18.6417 34.8417 18.0333 34.5667 17.3917 34.4333 c
17.3917 46.2917 l
18.4417 46.2917 19.4333 46.0917 20.35 45.6833 c
21.2667 45.275 22.4667 44.4083 23.9167 43.0833 c
25.375 41.75 26.1167 39.7167 26.1167 36.9833 c
26.1167 34.6167 25.25 32.425 23.5083 30.5083 c
21.775 28.65 19.5333 27.675 16.7833 27.675 c
14.5583 27.675 12.65 28.3417 10.9417 29.7417 c
9.8917 28.5417 l
11.8583 26.9167 14.15 26.1 16.7833 26.1 c
18.2333 26.1 19.6583 26.375 21.0167 26.9667 c
22.4167 27.55 23.5667 28.3667 24.5583 29.3083 c
25.55 30.3333 26.3167 31.475 26.85 32.8 c
27.3917 34.1 27.6667 35.5333 27.6667 36.9833 c
27.6667 38.4917 27.4167 39.8667 26.825 41.1917 c
26.2917 42.5167 25.475 43.6917 24.4833 44.7083 c
23.4583 45.7083 22.3167 46.525 20.9917 47.0583 c
19.6583 47.6417 18.2833 47.9 16.7833 47.925 c
15.7583 47.9 l
14.4083 47.9 13.1333 47.5417 11.9333 46.85 c
10.7917 46.1667 9.8667 45.275 9.1833 44.075 c
8.4917 42.925 8.1583 41.65 8.1583 40.25 c
8.1583 38.9 8.4917 37.6 9.2083 36.4 c
9.9167 35.2 10.8417 34.3083 11.9833 33.6167 c
13.1333 32.9833 14.4083 32.625 15.8083 32.65 c
h
15.8083 34.2083 m
15.8083 34.1833 l
14.2583 34.1833 12.85 34.7417 11.6 35.8667 c
10.35 36.9833 9.7417 38.4917 9.7417 40.25 c
9.7417 41.7833 10.3 43.1583 11.425 44.4083 c
12.55 45.6583 14.05 46.2917 15.8083 46.3167 c
15.8083 34.2083 l
h
f*
Q
q
0.028 0.019 0 0.576 k
0.028 0.019 0 0.576 K
38.825 28.8 m
38.825 43.4917 l
37.2417 43.4917 l
37.2417 30.4083 l
35.5083 30.7167 33.925 31.525 32.525 32.8833 c
31.1 34.2333 30.4083 36.0667 30.4083 38.3333 c
30.4083 40.45 31.175 42.3167 32.7 43.925 c
34.2333 45.525 36.1167 46.3417 38.3917 46.3667 c
38.825 46.3667 l
38.825 47.925 l
38.3917 47.9 l
37.675 47.9 37.0417 47.825 36.45 47.725 c
35.9167 47.5917 35.15 47.3417 34.2583 46.9583 c
33.3667 46.575 32.525 45.9583 31.6333 45.0667 c
30.7917 44.175 30.075 43.1583 29.5667 42.0083 c
29.0583 40.8583 28.825 39.6417 28.825 38.3333 c
28.825 37.0333 29.0833 35.7833 29.6167 34.5917 c
30.125 33.3917 30.8167 32.3667 31.6333 31.55 c
32.45 30.7417 33.4667 30.05 34.6917 29.5417 c
35.8917 29.0333 37.1417 28.8 38.3917 28.8 c
38.825 28.8 l
h
f*
Q
q
0.032 0.016 0 0.51 k
0.032 0.016 0 0.51 K
22.3 17.9333 m
25.4333 17.9333 l
26.3667 17.9333 26.8667 17.8083 27.3 17.6667 c
27.3583 17.6667 27.3917 17.65 27.4417 17.6333 c
27.4417 20.15 l
27.3917 20.1333 27.3583 20.1167 27.3 20.1167 c
26.8667 19.975 26.3667 19.8417 25.4333 19.8417 c
22.3 19.8417 l
22.3 22.5833 l
25.8833 22.5833 l
26.8333 22.5833 27.3333 22.4583 27.75 22.3083 c
27.8083 22.3083 27.8417 22.2917 27.8917 22.275 c
27.55 24.4917 l
27.5333 24.4917 l
18.3167 24.4917 l
17.5417 24.4917 l
17.5417 24.4917 17.5667 24.475 17.5667 24.45 c
17.7833 24.025 17.9083 23.5917 17.9083 22.5083 c
17.9083 14.9167 l
17.9083 13.8333 17.7833 13.4 17.5667 12.9667 c
17.5667 12.95 17.5417 12.9333 17.5417 12.9333 c
22.6583 12.9333 l
22.6583 12.9333 22.6417 12.95 22.6417 12.9667 c
22.425 13.4 22.3 13.8333 22.3 14.9167 c
22.3 17.9333 l
h
f*
Q
q
0.032 0.016 0 0.51 k
0.032 0.016 0 0.51 K
28.5 21.3917 m
28.525 21.3417 28.5583 21.325 28.575 21.2667 c
28.7917 20.8917 28.975 20.5083 28.975 19.45 c
28.975 14.875 l
28.975 13.8167 28.7917 13.4333 28.575 13.0583 c
28.5583 13.0083 28.525 12.9833 28.5 12.9333 c
33.6917 12.9333 l
33.6667 12.9833 33.6333 13.0083 33.6167 13.0583 c
33.4 13.4333 33.2167 13.8167 33.2167 14.875 c
33.2167 17.5917 l
33.2167 18.175 33.35 18.55 33.5833 18.75 c
33.8333 18.9417 34.375 19.0333 35.2167 19.0333 c
36.15 19.0333 36.5 18.9833 36.8417 18.8167 c
36.9667 18.7667 37.075 18.6917 37.2167 18.625 c
37.2167 21.3917 l
35.1083 21.3917 l
34.4417 21.3917 33.975 21.2833 33.6667 21.0833 c
33.3833 20.8917 33.1333 20.5333 32.9333 20.025 c
32.9 20.025 l
32.75 21.3917 l
28.5 21.3917 l
h
f*
Q
q
0.032 0.016 0 0.51 k
0.032 0.016 0 0.51 K
38.6083 21.3917 m
38.3083 19.375 l
38.4333 19.4333 38.525 19.4667 38.6083 19.525 c
38.9917 19.6667 39.3667 19.7333 40 19.7333 c
44.225 19.7333 l
44.825 19.7333 44.95 19.575 44.95 19.2 c
44.95 18.8167 44.825 18.6583 44.225 18.6583 c
40.3583 18.6583 l
38.4667 18.6583 37.9083 17.8833 37.9083 16.1 c
37.9083 15.4917 l
37.9083 13.7417 38.4667 12.9333 40.3583 12.9333 c
43.3833 12.9333 l
44.5333 12.9333 44.8917 13.1333 45.1083 13.8667 c
45.1417 13.8667 l
45.3583 12.9333 l
49.6417 12.9333 l
49.4083 13.275 49.2333 13.65 49.2333 14.5167 c
49.2333 18.2083 l
49.2333 20.5333 48.425 21.3917 46.3833 21.3917 c
38.6083 21.3917 l
h
44.95 17 m
44.95 15.7917 l
44.95 15.2583 44.8917 14.9167 44.8 14.7833 c
44.7167 14.6583 44.4583 14.5917 44.05 14.5917 c
43.0583 14.5917 l
42.4083 14.6083 42.1583 14.7167 42.1583 15.3083 c
42.1583 16.2833 l
42.1583 16.9083 42.4083 16.9833 43.0583 17 c
44.95 17 l
h
f*
Q
q
0.032 0.016 0 0.51 k
0.032 0.016 0 0.51 K
50.25 21.3917 m
50.2667 21.3417 50.3083 21.325 50.325 21.2667 c
50.5417 20.8917 50.7167 20.5083 50.7167 19.45 c
50.7167 14.875 l
50.7167 13.8167 50.5417 13.4333 50.325 13.0583 c
50.3083 13.0083 50.2667 12.9833 50.25 12.9333 c
55.075 12.9333 l
55.0583 12.9833 55.025 13.0083 55 13.0583 c
54.7917 13.4333 54.6083 13.8167 54.6083 14.875 c
54.6083 19.125 l
54.6083 19.5583 54.825 19.7333 55.1333 19.7333 c
56.5333 19.7333 l
56.875 19.7333 57.0583 19.5583 57.0583 19.125 c
57.0583 14.875 l
57.0583 13.8167 56.875 13.4333 56.6583 13.0583 c
56.6417 13.0083 56.6083 12.9833 56.5917 12.9333 c
61.45 12.9333 l
61.4333 12.9833 61.3917 13.0083 61.375 13.0583 c
61.1583 13.4333 60.9833 13.8167 60.9833 14.875 c
60.9833 19.125 l
60.9833 19.5583 61.2 19.7333 61.5 19.7333 c
62.9083 19.7333 l
63.25 19.7333 63.425 19.5583 63.425 19.125 c
63.425 14.875 l
63.425 13.8167 63.25 13.4333 63.0333 13.0583 c
63.0167 13.0083 62.975 12.9833 62.9583 12.9333 c
67.7833 12.9333 l
67.7667 12.9833 67.7333 13.0083 67.7083 13.0583 c
67.5 13.4333 67.3167 13.8167 67.3167 14.875 c
67.3167 18.0833 l
67.3167 19.5417 67.0667 20.4583 66.5583 20.8333 c
66.0583 21.2167 65.4417 21.3917 64.7417 21.3917 c
61.825 21.3917 l
61.325 21.3917 61.0917 21.1083 60.9583 20.8167 c
60.9083 20.6917 60.8917 20.5667 60.875 20.475 c
60.8333 20.475 l
60.8167 20.5333 60.8 20.5667 60.7833 20.6167 c
60.55 21.1917 60.3167 21.3917 59.3583 21.3917 c
55.525 21.3917 l
54.8083 21.3917 54.625 20.925 54.425 20.3667 c
54.3917 20.3667 l
54.2833 21.3917 l
50.25 21.3917 l
h
f*
Q
q
0.032 0.016 0 0.51 k
0.032 0.016 0 0.51 K
79.9667 16.2417 m
79.9667 18.8333 l
79.9667 20.6167 79.45 21.3917 77.525 21.3917 c
71.025 21.3917 l
69.1333 21.3917 68.575 20.6167 68.575 18.8333 c
68.575 15.4917 l
68.575 13.7417 69.1333 12.9333 71.025 12.9333 c
79.5167 12.9333 l
79.8417 14.95 l
79.575 14.825 79.3417 14.75 79.1083 14.7 c
78.75 14.6083 78.4 14.5917 77.9167 14.5917 c
73.8 14.5917 l
73.1333 14.5917 72.8417 14.8583 72.825 15.45 c
72.825 16.2417 l
79.9667 16.2417 l
h
72.825 17.9 m
72.825 19.05 l
72.825 19.5417 72.9833 19.7333 73.4333 19.7333 c
75.1833 19.7333 l
75.6667 19.7333 75.7917 19.5417 75.7917 19.05 c
75.7917 17.9 l
72.825 17.9 l
h
f*
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%DocumentProcessColors: Cyan Magenta Black
%%DocumentCustomColors:
%%CMYKCustomColor:
%%EOF
